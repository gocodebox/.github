name: 'LifterLMS E2E Testing Setup'
description: 'Setup the E2E testing environment for use in puppeteer/jest testing workflows for LifterLMS and LifterLMS add-ons'

inputs:

  # Docker
  docker-user:
    description: "Docker Hub username"
  docker-pass:
    description: "Docker Hub password"

  # Node (actions/setup-node@v2)
  node-version:
    description: "Node.js version, passed directly to actions/setup-node@v2"
    default: "14"

  # PHP (shivammathur/setup-php@v2)
  php-version:
    description: "PHP version, passed directly to shivammathur/setup-php@v2"
    default: "8.0"

  # WordPress
  wp-version:
    description: "WordPress core version"
    default: "5.8"

runs:
  using: "composite"
  steps:

    # Setup PHP
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        coverage: "none"
        tools: wp,composer

    # Composer Install.
    - name: Get composer cache directory
      id: composer-cache
      shell: bash
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install Composer dependencies
      shell: bash
      run: composer update

    # Setup node and npm.
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
    - name: Install Node dependencies
      shell: bash
      run: npm ci && npm run build

    # Docker.
    - name: Login to Docker Hub
      shell: bash
      run: |
        if [[ ! -z "${{ inputs.docker-user }}" && ! -z "${{ inputs.docker-pass }}" ]]; then
          echo "${{ inputs.docker-pass }}" | docker login -u "${{ inputs.docker-user }}" --password-stdin
        fi
    - name: Start Docker environment
      shell: bash
      run: |
        composer run env up
        composer run env:setup

    # Update WP and setup env.
    - name: Update WP Version
      shell: bash
      run: |
        if [[ "latest" != "${{ inputs.wp-version  }}" ]]; then
          composer run env version ${{ inputs.wp-version }}
        fi
    - name: Set WP_VERSION env var
      shell: bash
      run: echo WP_VERSION=$( ./vendor/bin/llms-env wp core version ) >> $GITHUB_ENV
